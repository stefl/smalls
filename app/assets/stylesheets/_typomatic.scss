

// A type scaling utility $type-scale map with the predefined values

 // Each loop that outputs all of the type scales as placeholders with their type-prefix
 // ex. %t-tiny, %t-small
@each $scale in map-keys($type-scale) {
    %#{$type-prefix}#{$scale} {
        @include adjust-font-size-to (
            map-fetch($type-scale, $scale font-size),   
            map-fetch($type-scale, $scale base-lines)
        );
    }
}

// A mixin for using type scale
// Parameters: 
// $scale (tiny, small...) 
// $extend (boolean) - true by default, if needed inside media query use false to @include the content instead of @extend
// ex. @include type-scale(small) or @include type-scale(small, false) for use inside media queries. 

@mixin type-scale($scale, $extend: true, $map: $type-scale) {
    @if $extend {
        @extend %#{$type-prefix}#{$scale};
    }
    @else {
        @include adjust-font-size-to(
            map-fetch($map, $scale font-size),
            map-fetch($map, $scale base-lines)
        );
    }
}

@mixin type-scale-mobile($scale, $extend: false, $map: $type-scale-mobile) {
    @if $extend {
        @extend %#{$type-prefix}#{$scale};
    }
    @else {
        @include adjust-font-size-to(
            map-fetch($map, $scale font-size),
            map-fetch($map, $scale base-lines)
        );
    }
}

// A simple type-weight mixin
// ex. @include type-weight(strong);
@mixin type-weight($weight) {
    font-weight: map-get($type-weight, $weight);
}

// A quick ligature mixin, to be updated with a more modular one
@mixin type-ligatures() {
    -moz-font-feature-settings: "liga=1, dlig=1";
    -ms-font-feature-settings: "liga", "dlig";
    -webkit-font-feature-settings: "liga", "dlig";
    -o-font-feature-settings: "liga", "dlig";
    font-feature-settings: "liga", "dlig";
}

// Headings

body {
    font-family: $base-font-family;
}
body /deep/ {
    font-family: $base-font-family;
    #{h1, h2, h3, h4, h5} {
        font-family: $base-font-family;
        margin-top: 0;
        @include type-weight(regular);
        @include margin-trailer(1);
        @include type-ligatures;
        text-transform: uppercase;
        letter-spacing: 1px;
    }
    h1 {
        @include type-scale(xxlarge);
        letter-spacing: 1px;
    }
    h2 {
        @include type-scale(xlarge);
        letter-spacing: 1px;
    }
    h3 {
        @include type-scale(large);
        letter-spacing: 2px;
        &.h3-thin {
           @include type-weight(thin); 
        }
    }
    h4 {
        @include type-scale(medium);
        letter-spacing: 2px;
    }
    h5 {
        @include type-scale(base);
    }

    // Paragraphs
    p {
        @include margin-trailer(1);
        @include word-break(break-word);
        @include hyphens(auto);
        @include type-ligatures;
        //font-family: $alt-font-family;
    }
}

// Small
small {
    @include type-scale(small);
}

.thumbcaption {
  @include type-scale(small);
}

.story-full-title {
  @include type-weight(black);
}

@include breakpoint(0em 30em) {
    h1 {
        @include type-scale-mobile(xlarge);
    }
    h2 {
        @include type-scale-mobile(xlarge);
    }
    h3 {
        @include type-scale-mobile(large);
        &.h3-thin {
           @include type-weight(thin); 
        }
    }
    h4 {
        @include type-scale-mobile(medium);
    }
    h5 {
        @include type-scale-mobile(base);
    }
    p, body {
        @include type-scale-mobile(base);
    }

    .thumbcaption {
      @include type-scale-mobile(small);
    }
}

.headline-title {
  @include type-weight(bold);
  .headline-year {
    @include type-weight(thin); 
  } 
}

.subline-title {
  .subline-year {
    @include type-weight(thin); 
  }
}


// Anchors
a {
    color: #4bc6df;
    text-decoration: none;
    &:hover, &:focus {
        color: lighten(#4bc6df,10);
    }
    &:focus {
        outline: 0;
    }
    &:active {
        color: darken(#2AEFFF, 10%);
    }
}